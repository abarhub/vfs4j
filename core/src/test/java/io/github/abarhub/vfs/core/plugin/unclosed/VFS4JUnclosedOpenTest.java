package io.github.abarhub.vfs.core.plugin.unclosed;

import io.github.abarhub.vfs.core.api.operation.VFS4JOpen;
import io.github.abarhub.vfs.core.api.path.VFS4JPathName;
import io.github.abarhub.vfs.core.api.path.VFS4JPaths;
import io.github.abarhub.vfs.core.plugin.unclosed.open.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.StandardCharsets;
import java.nio.file.DirectoryStream;
import java.nio.file.OpenOption;

import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

class VFS4JUnclosedOpenTest {

    private VFS4JUnclosedPlugins vfs4JUnclosedPlugins;
    private VFS4JOpen open;
    private UnclosableRunnable unclosableRunnable;

    private VFS4JUnclosedOpen vfs4JUnclosedOpen;

    @BeforeEach
    void setUp() {
        vfs4JUnclosedPlugins = new VFS4JUnclosedPlugins();
        open = mock(VFS4JOpen.class);
        unclosableRunnable = new UnclosableRunnable(new UnclosedConfig(), vfs4JUnclosedPlugins);
        vfs4JUnclosedOpen = new VFS4JUnclosedOpen(vfs4JUnclosedPlugins, open, unclosableRunnable);
    }

    @Test
    void newInputStream() throws IOException {
        VFS4JPathName path = VFS4JPaths.get("dir", "test.txt");
        ByteArrayInputStream res = new ByteArrayInputStream("abc".getBytes(StandardCharsets.UTF_8));
        when(open.newInputStream(eq(path), any(OpenOption[].class))).thenReturn(res);

        // méthode testée
        InputStream result = vfs4JUnclosedOpen.newInputStream(path);

        // vérifications
        assertNotNull(result);
        assertInstanceOf(UnclosedInputStream.class, result);
        verify(open, times(1)).newInputStream(eq(path), any(OpenOption[].class));
    }

    @Test
    void newOutputStream() throws IOException {
        VFS4JPathName path = VFS4JPaths.get("dir", "test.txt");
        ByteArrayOutputStream res = new ByteArrayOutputStream();
        when(open.newOutputStream(eq(path), any(OpenOption[].class))).thenReturn(res);

        // méthode testée
        OutputStream result = vfs4JUnclosedOpen.newOutputStream(path);

        // vérifications
        assertNotNull(result);
        assertInstanceOf(UnclosedOutputStream.class, result);
        verify(open, times(1)).newOutputStream(eq(path), any(OpenOption[].class));
    }

    @Test
    void newReader() throws IOException {
        VFS4JPathName path = VFS4JPaths.get("dir", "test.txt");
        StringReader res = new StringReader("abc");
        when(open.newReader(eq(path))).thenReturn(res);

        // méthode testée
        Reader result = vfs4JUnclosedOpen.newReader(path);

        // vérifications
        assertNotNull(result);
        assertInstanceOf(UnclosedReader.class, result);
        verify(open, times(1)).newReader(eq(path));
    }

    @Test
    void newWriter() throws IOException {
        VFS4JPathName path = VFS4JPaths.get("dir", "test.txt");
        Writer res = new StringWriter();
        when(open.newWriter(eq(path), eq(true))).thenReturn(res);

        // méthode testée
        Writer result = vfs4JUnclosedOpen.newWriter(path, true);

        // vérifications
        assertNotNull(result);
        assertInstanceOf(UnclosedWriter.class, result);
        verify(open, times(1)).newWriter(eq(path), eq(true));
    }

    @Test
    void newByteChannel() throws IOException {
        VFS4JPathName path = VFS4JPaths.get("dir", "test.txt");
        SeekableByteChannel res = mock(SeekableByteChannel.class);
        when(open.newByteChannel(eq(path), eq(null))).thenReturn(res);

        // méthode testée
        SeekableByteChannel result = vfs4JUnclosedOpen.newByteChannel(path, null);

        // vérifications
        assertNotNull(result);
        assertInstanceOf(UnclosedSeekableByteChannel.class, result);
        verify(open, times(1)).newByteChannel(eq(path), eq(null));
    }

    @Test
    void newDirectoryStream() throws IOException {
        VFS4JPathName path = VFS4JPaths.get("dir", "test.txt");
        DirectoryStream<VFS4JPathName> res = mock(DirectoryStream.class);
        when(open.newDirectoryStream(eq(path), eq(null))).thenReturn(res);

        // méthode testée
        DirectoryStream<VFS4JPathName> result = vfs4JUnclosedOpen.newDirectoryStream(path, null);

        // vérifications
        assertNotNull(result);
        assertInstanceOf(UnclosedDirectoryStream.class, result);
        verify(open, times(1)).newDirectoryStream(eq(path), eq(null));
    }
}